{"version":3,"sources":["images/mcp_datasheet.png","images/ss.JPG","images/ss_cont1.JPG","images/ss_cont2.JPG","images/mearm_on.JPG","images/mearm_contents.JPG","images/me.jpg","reducers/projectsReducer.js","services/jokeService.js","reducers/jokeReducer.js","data/projectComponents/Ennustin.js","data/projectComponents/ADCRaspi.js","data/projectComponents/Nopeuspeli.js","data/projectComponents/Mearm.js","data/projects.js","components/TopMenu.js","components/Kuka.js","components/Projektit.js","components/Home.js","components/About.js","components/Joke.js","App.js","store.js","index.js","images/nopeuspeli.jpg","images/mcp3008.jpg","images/mearm.jpg","images/wp.jpg"],"names":["module","exports","projectsReducer","state","action","type","data","axios","get","then","response","setJoke","props","dispatch","a","async","jokeService","newJoke","jokeReducer","value","joke","Ennustin","Header","as","Image","src","wp","size","floated","href","ADCRaspi","mcp","datasheet","Nopeuspeli","Group","nopeuspeli","ss","ss1","ss2","Mearm","mearm","mearmon","mearmcontent","projectsList","id","name","description","img","codeUrl","content","url","myarm","TopMenu","useState","activeItem","setActiveItem","handleItemClick","e","Menu","stackable","fluid","widths","Item","Link","to","active","onClick","Icon","Kuka","me","rounded","target","rel","color","connectedProjektit","connect","projects","mappedProjects","map","p","Card","key","wrapped","ui","Content","Description","Home","icon","textAlign","About","mapDispatchToProps","connectedJoke","Segment","Button","loading","initializeProjects","connectedApp","useEffect","projectById","selector","Container","path","Projektit","exact","render","match","params","reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"6EAAAA,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,gC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,gC,6JCkB5BC,EAlBS,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC5C,OAAQA,EAAOC,MAGX,IAAK,gBACD,OAAOD,EAAOE,KAClB,QACI,OAAOH,I,mCCCJ,EALG,WAEhB,OADgBI,IAAMC,IAHR,sCAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASJ,SCK9BK,EAAU,SAACC,GACpB,OAAO,SAAMC,GAAN,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACmBE,KADnB,OACGC,EADH,OAEHJ,EAAS,CACXR,KAAM,WACNC,KAAMW,IAJD,uCAWIC,EApBK,WAAuB,IAAtBf,EAAqB,uDAAf,GAAIC,EAAW,uCACtC,OAAQA,EAAOC,MACX,IAAK,WACD,OAAOD,EAAOE,KAAKa,MAAMC,KAC7B,QACI,OAAOjB,I,sFCiBJkB,EAnBE,WAEjB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,6BACA,kBAACD,EAAA,EAAD,CAAQC,GAAG,MAAX,sDACA,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAIC,KAAK,SAASC,QAAQ,SACtC,4QACA,gRACA,6TACA,utBACA,mVACA,qOACA,8CAAgB,uBAAGC,KAAK,uDAAR,cAAhB,O,kBCOOC,EAnBE,WACT,OACA,6BACQ,kBAACR,EAAA,EAAD,CAAQC,GAAG,MAAX,eACA,kBAACC,EAAA,EAAD,CAAOC,IAAKM,IAAKJ,KAAK,SAASC,QAAQ,SACvC,kBAACN,EAAA,EAAD,CAAQC,GAAG,MAAX,2EACA,kJACA,0HACA,qEACA,+DACA,mEAAqC,kBAACC,EAAA,EAAD,CAAOC,IAAKO,IAAWL,KAAK,OAAOC,QAAQ,WAChF,6JACA,2OACA,4IACA,8N,sDCkCDK,EA/CI,WACX,OACQ,6BACA,kBAACX,EAAA,EAAD,CAAQC,GAAG,MAAX,cACA,kBAACC,EAAA,EAAMU,MAAP,CAAaP,KAAK,UACV,kBAACH,EAAA,EAAD,CAAOC,IAAKU,MACZ,kBAACX,EAAA,EAAD,CAAOC,IAAKW,OAEZ,kBAACd,EAAA,EAAD,CAAQC,GAAG,MAAX,sGACR,kBAACC,EAAA,EAAMU,MAAP,CAAaP,KAAK,SACV,kBAACH,EAAA,EAAD,CAAOC,IAAKY,MACZ,kBAACb,EAAA,EAAD,CAAOC,IAAKa,OAEpB,yrBAaA,6BACA,6BAdA,8fAwBA,wMAIoC,uBAAGT,KAAK,uDAAR,SAJpC,O,oCCcDU,EApDD,WACV,OACA,6BACI,kBAACjB,EAAA,EAAD,CAAQC,GAAG,MAAX,aACA,kBAACC,EAAA,EAAMU,MAAP,CAAaP,KAAK,UACd,kBAACH,EAAA,EAAD,CAAOC,IAAKe,MACZ,kBAAChB,EAAA,EAAD,CAAOC,IAAKgB,MACZ,kBAACjB,EAAA,EAAD,CAAOC,IAAKiB,OAEhB,kBAACpB,EAAA,EAAD,CAAQC,GAAG,MAAX,qFACA,wpDAuBa,6BACpB,4BAAI,0CAAsB,6BAxBnB,03BAqCA,+CAAoB,uBAAGM,KAAK,4FAAR,cAApB,OC3CFc,EAEF,CAAC,CACOC,GAAI,IACJC,KAAM,aACNC,YAAa,mDACbC,IAAKZ,IACLa,QAAS,sDACTC,QAAS,0gBACTC,IAAK,eAET,CACIN,GAAI,IACJC,KAAM,QACNC,YAAa,4DACbC,IAAKI,IACLH,QAAS,2FACTC,QAAS,wwDACTC,IAAK,eAET,CACIN,GAAI,IACJC,KAAM,0BACNC,YAAa,qDACbC,IAAKrB,IACLsB,QAAS,sDACTC,QAAS,g1BACTC,IAAK,eAET,CACIN,GAAI,IACJC,KAAM,YACNC,YAAa,iFACbC,IAAKhB,IACLiB,QAAS,KACTC,QAAS,ygBACTC,IAAK,gBAqBFP,I,0BCjBAS,EA7CC,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACXC,EADW,KACCC,EADD,KAGZC,EAAkB,SAACC,GACrBF,EAAcE,IAGlB,OACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,OAAK,EAACC,OAAQ,GAC1B,kBAACH,EAAA,EAAKI,KAAN,CACIvC,GAAIwC,IACJC,GAAG,IACHC,OAAuB,SAAfX,EACRY,QAAS,kBAAKV,EAAgB,UAE1B,kBAACW,EAAA,EAAD,CAAMtB,KAAK,UAEnB,kBAACa,EAAA,EAAKI,KAAN,CACIvC,GAAIwC,IACJC,GAAG,QACHC,OAAuB,SAAfX,EACRY,QAAS,kBAAKV,EAAgB,UAJlC,QAMA,kBAACE,EAAA,EAAKI,KAAN,CACIvC,GAAIwC,IACJC,GAAG,aACHC,OAAuB,cAAfX,EACRY,QAAS,kBAAKV,EAAgB,eAJlC,aAMA,kBAACE,EAAA,EAAKI,KAAN,CACIvC,GAAIwC,IACJC,GAAG,QACHC,OAAuB,SAAfX,EACRY,QAAS,kBAAKV,EAAgB,UAJlC,UAMA,kBAACE,EAAA,EAAKI,KAAN,CACIvC,GAAIwC,IACJC,GAAG,SACHC,OAAuB,UAAfX,EACRY,QAAS,kBAAKV,EAAgB,WAJlC,W,kBCFOY,EA/BF,WACT,OACI,6BACI,kBAAC9C,EAAA,EAAD,CAAQK,KAAK,SAAb,iBACA,kBAACH,EAAA,EAAD,CAAOC,IAAK4C,IAAI1C,KAAK,QAAQ2C,SAAO,EAAC1C,QAAQ,SAC7C,iKAGA,2YASA,kWAMA,gHACA,8KACA,uBAAGC,KAAK,wCAAwC0C,OAAO,SAASC,IAAI,uBAAsB,kBAACL,EAAA,EAAD,CAAMtB,KAAK,WAAW4B,MAAM,OAAO9C,KAAK,UAClI,uBAAGE,KAAK,6BAA6B0C,OAAO,SAASC,IAAI,uBAAsB,kBAACL,EAAA,EAAD,CAAMtB,KAAK,SAASlB,KAAK,OAAO8C,MAAM,SAArH,O,UCAGC,GAFYC,aANH,SAACxE,GACrB,MAAO,CACLyE,SAAUzE,EAAMyE,YAIKD,EAxBT,SAAC/D,GACf,IAAMiE,EAAiBjE,EAAMgE,SAASE,KAAI,SAAAC,GAAC,OACvC,kBAACC,GAAA,EAAD,CAAMzD,GAAIwC,IAAMC,GAAIe,EAAE7B,IAAK+B,IAAKF,EAAEnC,IAC9B,kBAACpB,EAAA,EAAD,CAAOC,IAAKsD,EAAEhC,IAAKmC,SAAO,EAACC,IAAI,IAC/B,kBAACH,GAAA,EAAKI,QAAN,KACI,kBAACJ,GAAA,EAAK1D,OAAN,KAAcyD,EAAElC,MAChB,kBAACmC,GAAA,EAAKK,YAAN,KACKN,EAAEjC,kBAMnB,OACI,kBAACkC,GAAA,EAAK9C,MAAN,KAAa2C,M,UCTNS,GATF,SAAC1E,GACV,OACI,kBAACU,EAAA,EAAD,CAAQC,GAAG,KAAKgE,MAAI,EAACC,UAAU,UAC3B,kBAACrB,EAAA,EAAD,CAAMtB,KAAK,SADf,+BCcO4C,GAjBD,WACd,OACI,6BACA,iDACA,yOAOA,+DACA,sI,UCeIC,GAAqB,CACzB/E,WAKWgF,GAFOhB,aAVE,SAACxE,GACrB,MAAO,CACLiB,KAAMjB,EAAMiB,QAQ6BsE,GAAzBf,EAzBT,SAAC/D,GAIV,OACI,kBAACgF,GAAA,EAAD,CAASJ,UAAU,UACf,kBAACK,GAAA,EAAD,CAAQN,MAAI,EAACrB,QALD,SAACT,GACjB7C,EAAMD,YAIF,qDACmC,6BACnC,kBAACwD,EAAA,EAAD,CAAMtB,KAAK,SAASiD,SAAO,KAE3B,2BAAIlF,EAAMQ,UCmDtB,IAMMsE,GAAqB,CACzBK,mBdjEgC,SAACnB,GAC/B,MAAO,CACHvE,KAAM,gBACNC,KAAMsE,Ic+DZjE,WAKaqF,GAFMrB,aAXG,SAACxE,GACvB,MAAO,CACLyE,SAAUzE,EAAMyE,YAS0Bc,GAAzBf,EA3DrB,SAAa/D,GAEXqF,qBAAU,WACRrF,EAAMmF,mBAAmBpD,KACxB,IAEHsD,qBAAU,WACRrF,EAAMD,YACL,IAEH,IAAMuF,EAAc,SAACtD,GAEnB,OPkBoB,SAACA,GACrB,OAAOA,GACH,IAAK,IACD,OAAO,kBAAC,EAAD,MACX,IAAK,IACD,OAAO,kBAAC,EAAD,MACX,IAAK,IACD,OAAO,kBAAC,EAAD,MACX,IAAK,IACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,MO7BRuD,CAASvD,IAIlB,OAEI,kBAAC,IAAD,KACE,kBAACwD,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,uEACA,kBAACC,GAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,gBAAgBG,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACvC,6BAAMP,EAAYO,EAAMC,OAAO9D,QAElC,kBAAC,IAAD,CAAO2D,OAAK,EAACF,KAAK,KAChB,kBAAC,GAAD,c,mBCtDNM,GAAUC,aAAgB,CAC9BhC,SAAU1E,EACVkB,KAAMF,IAKO2F,GAFDC,aAAYH,GAASI,aAAgBC,OCJnDC,IAAST,OACL,kBAAC,IAAD,CAAUK,MAAQA,IAClB,kBAAC,GAAD,OAEHK,SAASC,eAAe,U,mBCXzBnH,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.5a47e4a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mcp_datasheet.cfe0bc25.png\";","module.exports = __webpack_public_path__ + \"static/media/ss.08d9aba0.JPG\";","module.exports = __webpack_public_path__ + \"static/media/ss_cont1.8e19b295.JPG\";","module.exports = __webpack_public_path__ + \"static/media/ss_cont2.fc6124d6.JPG\";","module.exports = __webpack_public_path__ + \"static/media/mearm_on.16e48e83.JPG\";","module.exports = __webpack_public_path__ + \"static/media/mearm_contents.d39280ee.JPG\";","module.exports = __webpack_public_path__ + \"static/media/me.47d49092.jpg\";","const projectsReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        // case 'NEW_PROJECT':\r\n        //     return [...state, action.data]\r\n        case 'INIT_PROJECTS':\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeProjects = (projects) => {\r\n    return {\r\n        type: 'INIT_PROJECTS',\r\n        data: projects\r\n    }\r\n}\r\n\r\nexport default projectsReducer","import axios from 'axios'\r\nconst baseUrl = 'https://api.icndb.com/jokes/random'\r\n\r\nconst getRandom = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getRandom }","import jokeService from '../services/jokeService'\r\n\r\nconst jokeReducer = (state='', action) => {\r\n    switch (action.type) {\r\n        case 'SET_JOKE':\r\n            return action.data.value.joke\r\n        default:\r\n            return state\r\n    }}\r\n\r\nexport const setJoke = (props) => {\r\n    return async dispatch => {\r\n        const newJoke = await jokeService.getRandom()\r\n        dispatch({\r\n      type: 'SET_JOKE',\r\n      data: newJoke\r\n        })\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default jokeReducer","import React from 'react'\r\nimport { Header, Image } from 'semantic-ui-react'\r\nimport wp from '../../images/wp.jpg'\r\n\r\n\r\nconst Ennustin = () => {\r\n\r\nreturn (\r\n    <div>\r\n        <Header as=\"h1\">Lämpötilan ennustin</Header>\r\n        <Header as=\"h3\">Iot-kurssilla toteutettu Arduino MKR1000-projekti.</Header>\r\n        <Image src={wp} size='medium' floated='left'/>\r\n        <p>Projektin tavoitteena oli toteuttaa kokonainen IoT-pipeline sekä imitoida tekoälyä. Iot:n hyödyt tulevat sen tuottaamasta datasta ja datan hydöyntmämisestä. Tässä tehty malli on karkea toteutus siihen suuntaan.</p>\r\n        <p>Tässä tuotteessa Arduino MKR1000, jossa on integroitu wifi-moduuli, hakee tietoa Openweathermapin APIsta. Arduinoon on kytketty DHT22 lämpötilasensori. Arduinolta lähetetään mitattu sekä OWM-datan Googlen Firebaseen. </p>\r\n        <p>Dataa hyödynnetään niin, että kerätään verrokkiaineistoa sekä openweathermapista että itse mitattuna parvekkeelta. Arvioidakseen parvekkeen lämpötilaa huomenna, voidaan tätä dataa sekä openweathermapin ennustetta hyödyntää ennusteessa.</p>\r\n        <p>Minulle nämä olivat ensiaskeleet sekä APIen käyttöön että asynkroniseen javascriptiin. jChart piirteli tyhjää kaaviota, joten päädyin vanhanaikaiseen XMR-pyyntöjen käyttöön. Nyttemmin toki olen tutustunut enemmän async/awaitiin. Mielenkiintoista oli myös saada yksittäisinä lähetetyt tiedot näkymään Firebasessa listana. Firebasen Realtime Databasessa (RTDB) oli kokeilun jälkeen ominaisuus, että mikäli nimi/arvoparissa nimet ovat järjestyksessä lukuja nollasta eteenpäin, tulkitsee RTDB tiedon listana. Siten indeksoimalla pystyi Arduinolta lähettämään tietoa, joka RTDB:ssä näkyy listana.</p>\r\n        <p>Mikäli ennustetta haluttaisiin tarkentaa, tulisi ottaa huomioon myös esimerkiksi auringon paiste parvekkeelle (valon määrä) sekä muutoksen nopeus. Parveke on suljettu laseilla, joten sisäpuolella oleva ilmamassa muuttaa lämpöään yleensä viiveellä ulkopuoleen verrattuna</p>\r\n        <p>Koodi ei ole mitään kaunista, eikä tässä vaiheessa osaaminen riittänyt kunnollisen backendin tekemiseen. Koodi kuitenkin ajoi asiansa, sillä visualisoidaan kerättyä dataa.</p>\r\n        <p>Koodi löytyy <a href=\"https://github.com/aapokar/weatherPredicter_Arduino\">gitHubista</a>.</p>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Ennustin","import React from 'react'\r\nimport { Header, Image } from 'semantic-ui-react'\r\nimport mcp from '../../images/mcp3008.jpg'\r\nimport datasheet from '../../images/mcp_datasheet.png'\r\n\r\n\r\nconst ADCRaspi = () => {\r\n        return (\r\n        <div>\r\n                <Header as=\"h1\">ADC mcp3008</Header>\r\n                <Image src={mcp} size='medium' floated=\"left\" />\r\n                <Header as=\"h3\">Analogisen sensorin liittäminen Raspberry Pin digitaaliseen porttiin</Header>\r\n                <p>Dashboardin ja palvelimen Apin koodit olivat vaihto-opiskelijoiden käsialaa, joten en niitä tähän laita</p>\r\n                <p>Itse perehdyin seuraavaan kahteen riviin pythonia, jotka löytyvät nopeasti netistä</p>\r\n                <p>r = spi.xfer([1, (8+channel) &lt;&lt; 4, 0])</p>\r\n                <p>adcOut = ((r[1]\\&amp;3) &lt;&lt; 8) +r[2]</p>\r\n                <p>Yhdistettynä mcp3008 datasheettiin<Image src={datasheet} size='huge' floated='right' /></p>\r\n                <p>nähdään, että ensimmäinen rivi vastaa datasheetilla Mcu transmitted dataa ja received data tulee 10 bitillä.</p>\r\n                <p>Siten ykkösellä aloitetaan transfer, kanava valitaan siirtämällä valittu kanava tavun vasempaan laitaan ja lopuksi vielä lähetetään jotakin, jotta transfer pysyy käynnissä</p>\r\n                <p>SPI kirjastoa tutkiessa huomasin mm. että muistia varataan saman verran vastaanottoon kuin lähetykseen.</p>\r\n                <p>Datasheetissä näkyvät kolme vastaanotettua tavua. r[0] on merkityksetön, r[1] :stä maskataan 6 bittiä ja kerrotaan 8. Tämä lisätään tavuun r[2] ja voilá!</p>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default ADCRaspi","import React from 'react'\r\nimport nopeuspeli from '../../images/nopeuspeli.jpg'\r\nimport ss from '../../images/ss.JPG'\r\nimport ss1 from '../../images/ss_cont1.JPG'\r\nimport ss2 from '../../images/ss_cont2.JPG'\r\nimport { Header, Image } from 'semantic-ui-react'\r\n\r\nconst Nopeuspeli = () => {\r\n        return (\r\n                <div>\r\n                <Header as=\"h1\">Nopeuspeli</Header>\r\n                <Image.Group size='medium'>\r\n                        <Image src={nopeuspeli} />\r\n                        <Image src={ss} />\r\n                </Image.Group>\r\n                        <Header as=\"h3\">Speden Speleistä tuttu nopeutta vaativa peli. Itse tehtynä tietenkin. Kolmen tonnin haaste!!</Header>\r\n                <Image.Group size='large'>\r\n                        <Image src={ss1} />\r\n                        <Image src={ss2} />\r\n                </Image.Group>\r\n                <p>\r\n                Projektissa tutustuin PICAXEn kehitysalustaan, \r\n        tavoitteena oli tehdä BASICilla peli. PICAXE on opetustarkoitukseen \r\n        kehitetty alusta hyvin rajallisilla ominaisuuksilla. \r\n        Aloitus on kuitenkin helppoa ja graafinen ohjelmointikin onnistuu.\r\n        Tässä projektissa haasteita olivat mm. rajalliset \r\n        muistipaikat(muistaakseni 24 tavua muistia, jokainen erikseen \r\n                valmiiksi osoitettu) ja estetty/ei-mahdollinen pääsy \r\n                timer interrupteihin.\r\n                Pysyvää muistia eli eepromia käytetään\r\n                highscoren tallennukseen. Teknisesti lamppujen paloaika ja \r\n                samanaikainen näppäinten kuuntelu tapahtuu PICAXEn \r\n                pseudomoniajon ja external-interruptien yhdistelmällä.\r\n                <br/>\r\n                <br/>\r\n                Näin vuosien jälkeen on toki karmeaa katsoa koodia.\r\n                Kertoo hyvin siitä, miksi kirjoitetun koodin tulisi olla\r\n                hyvin dokumentoitua ja selkeää. Projekti oli kuitenkin todella\r\n                haasteellinen ja sen toimimaan saaminen oli kyllä välillä\r\n                työn ja tuskan takana. Yllättävän vaikeaa oli saada toimimaan\r\n                esimerkiksi sellainen ominaisuus, että peli loppuu, mikäli\r\n                pelaaja ei paina mitään nappia. Vastaavasti pelaaja voi antaa\r\n                pari eteen ja vasta sittenruveta painelemaan.\r\n                </p>\r\n                <p>\r\n                        Koodista on olemassa useita eri versioita, \r\n                        jossain vaiheessa lisäilin vielä PWM:llä\r\n                        pelin mittaan kirkastuvia ledejä.\r\n                        Sisällä on luultavasti tämä <a href=\"https://github.com/aapokar/SpedenSpeli_Picaxe_basic\">koodi</a>.\r\n                </p>\r\n                </div>\r\n        )\r\n}\r\n\r\nexport default Nopeuspeli\r\n\r\n\r\n        // codeUrl: \"\",\r\n","import React from 'react'\r\nimport mearm from '../../images/mearm.jpg'\r\nimport mearmon from '../../images/mearm_on.JPG'\r\nimport mearmcontent from '../../images/mearm_contents.JPG'\r\nimport { Header, Image } from 'semantic-ui-react'\r\n\r\nconst Mearm = () => {\r\n    return (\r\n    <div>\r\n        <Header as=\"h1\">Mearm DIY</Header>\r\n        <Image.Group size='medium'>\r\n            <Image src={mearm} />\r\n            <Image src={mearmon} />\r\n            <Image src={mearmcontent} />\r\n        </Image.Group>\r\n        <Header as=\"h3\">MeArmista tehty versio AtMega328P-sirulla 2mm opaalin värisestä akryylista.</Header>\r\n        <p>\r\n        Alun perin suunnittelin hexapodia, mutta päädyin omaan versioon \r\nMeArmista. Molemmista, hexapodista että mearmista, löytyy monenlaista\r\ntoteutusta. En nähnyt mielekkäänä kopioida valmiita piirustuksia, \r\nvaan itseasiassa punainen lanka olikin itse piirrellä Vertexillä \r\nosat ja miettiä miten rakenne saadaan toimimaan. Liitostavat ja \r\njoitakin yksityiskohtia toki katsoin suoraan valmiista malleista, \r\nmutta mitat ja muodot piirsin kaikki itse. Monissa valmiissa toteutuksissa runko \r\nnäyttäisi olevan kiinnitetty suoraan servon roottoriin kiinni, itse \r\npäädyin sorvaamaan alustan alumiinista ja kiinnittämään sen isoon laakeriin.\r\nServon kiinnitit laakerin alle alumiinikeskiöön, sisäkuvassa näkyy servon\r\nsivusuuntainen lukitus muovilevyllä tappeihin. Kotelo on muuten jyrsitty\r\nMDF-kakusta CNC:llä. \r\nOhjelman kehitysvaiheessa tutkin mahdollisuuksia puhelimella ohjaukseen ja \r\nlopulta päädyin käyttämään valmista ratkaisua (Ardudroid, linkki lopussa).\r\nTuossa koodissa olikin jo käytännössä kaikki virheentunnistusta myöten valmiina,\r\n muutamat yksityiskohdat (kuten portit) piti asettaa sopivaksi tähän projektiin. \r\n Olisi ollut melkoinen työmaa lähteä itse siinä vaiheessa opiskelemaan \r\n Android-ohjelmointia. Kuvissa näkyy, että en käyttänyt Arduinon valmiita boardeja, \r\n vaan tein itse AtMega328P:lle piirilevyn. Käytännössä kyseessä on siis \r\n kuitenkin Arduinon tekniikka, itse tehtynä, ilman ylimääräisiä development \r\n boardin komponentteja. \r\n Tila loppui kotelosta kesken, joten piirilevy piti \r\n jakaa kahteen osaan.<br/>\r\n <h4><i>Lopputulos</i></h4><br/>\r\n Iso ongelma tuli kun kasasin rungon, sillä pienet \r\n kiinanservot hyytyivät painon alla. Tai ilmeisesti virtaa ei riittänyt \r\n pitää haarukkaa ääriasennossa, vaan mikropiiri rupesi boottailemaan \r\n jännitteen laskettua n. 4,5V. Paikkasin tilannetta lisäämällä tietokoneen \r\n muuntajan virtalähteeksi kovimmassa rasituksessa oleville servoille, väliin \r\n tosin tarvitsi säädettävän muuntajan. Tämä sähköongelma jäi lopulta ratkaisematta,\r\n sillä oskilloskoopin käyttö ei silloin onnistunut. Servojen käyttövirta oli\r\n muistaakseni luvattu ~400mA, mutta yleismittarin piikkinä kävi yli 800mA.\r\n Harmillisesti tämä projekti jäi viimeistelemättä. Siihen aikaan hain töitä\r\n syksyksi ja kesäksi, viimeistelin muita opintoja ja gradua, tein matematiikan\r\n sijaisuutta, pelasin ja tuomaroin salibandya...\r\n        </p>\r\n        <p>Koodina sovelsin <a href=\"http://www.techbitar.com/ardudroid-simple-bluetooth-control-for-arduino-and-android.html\">tätä</a>.</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Mearm\r\n\r\n","import React from 'react'\r\nimport nopeuspeli from '../images/nopeuspeli.jpg'\r\nimport mcp from '../images/mcp3008.jpg'\r\nimport myarm from '../images/mearm.jpg'\r\nimport wp from '../images/wp.jpg'\r\nimport Ennustin from './projectComponents/Ennustin'\r\nimport ADCRaspi from './projectComponents/ADCRaspi'\r\nimport Nopeuspeli from './projectComponents/Nopeuspeli'\r\nimport Mearm from './projectComponents/Mearm'\r\n\r\nconst projectsList =  \r\n\r\n    [{\r\n            id: \"1\",\r\n            name: \"Nopeuspeli\",\r\n            description: \"Speden Speleistä tuttu nopeutta vaativa peli.\",\r\n            img: nopeuspeli,\r\n            codeUrl: \"https://github.com/aapokar/SpedenSpeli_Picaxe_basic\",\r\n            content: \"Projektissa tutustuin PICAXEn kehitysalustaan, tavoitteena oli tehdä BASICilla peli. PICAXE on opetustarkoitukseen kehitetty alusta hyvin rajallisilla ominaisuuksilla. Tässä projektissa haasteita olivat mm. rajalliset muistipaikat(muistaakseni 8 tavua muistia, jokainen erikseen valmiiksi osoitettu) ja estetty/ei-mahdollinen pääsy timer interrupteihin. Teknisesti lamppujen paloaika ja samanaikainen näppäinten kuuntelu tapahtuu PICAXEn pseudomoniajon ja external-interruptien yhdistelmällä.\",\r\n            url: \"/projects/1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            name: \"MeArm\",\r\n            description: \"MeArmista tehty versio AtMega328P-sirulla 2mm akryylista.\",\r\n            img: myarm,\r\n            codeUrl: \"http://www.techbitar.com/ardudroid-simple-bluetooth-control-for-arduino-and-android.html\",\r\n            content: \"Alun perin suunnittelin hexapodia, mutta päädyin omaan versioon MeArmista. En nähnyt mielekkäänä kopioida valmiita piirustuksia, vaan itseasiassa punainen lanka olikin itse piirrellä Vertexillä osat ja miettiä miten rakenne saadaan toimimaan. Liitostavat ja joitakin yksityiskohtia toki katsoin suoraan valmiista malleista, mutta mitat ja muodot piirsin kaikki itse. Monissa valmiissa runko näyttäisi olevan kiinnitetty suoraan servon roottoriin kiinni, itse päädyin sorvaamaan alustan alumiinista ja kiinnittämään sen isoon laakeriin. Ohjelman kehitysvaiheessa tutkin mahdollisuuksia puhelimella ohjaukseen ja lopulta päädyin käyttämäänä suht valmista ratkaisua (Ardudroid, linkki lopussa). Tuossa koodissa olikin jo käytännössä kaikki virheentunnistusta myöten valmiina, muutamat yksityiskohdat piti asettaa sopivaksi tähän projektiin. Olisi ollut melkoinen työmaa lähteä itse siinä vaiheessa opiskelemaan Android-ohjelmointia. Kuvissa näkyy, että en käyttänyt Arduinon runkoa, vaan tein itse AtMega328P:lle piirilevyn. Käytännössä kyseessä on siis kuitenkin Arduinon tekniikka, itse tehtynä, ilman ylimääräisiä development boardin komponentteja. Tila loppui kotelosta kesken, joten piirilevy piti jakaa kahteen osaan. Iso ongelma tuli kun kasasin rungon, sillä pienet kiinanservot hyytyivät painon alla. Tai itse asiassa virtaa ei riittänyt pitää haarukkaa ääriasennossa, vaan mikropiiri rupesi boottailemaan jännitteen laskettua n. 4,5V. Paikkasin tilannetta lisäämällä tietokoneen muuntajan virtalähteeksi kovimmassa rasituksessa oleville servoille, väliin tosin tarvitsi säädettävän muuntajan.\",\r\n            url: \"/projects/2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            name: \"Lämpötilaennustin\",\r\n            description: \"Iot-kurssilla toteutettu Arduino MKR1000-projekti.\",\r\n            img: wp,\r\n            codeUrl: \"https://github.com/aapokar/weatherPredicter_Arduino\",\r\n            content: \"Tässä projektissa Arduino hakee tietoa Openweathermapin APIsta ja lähettää itse mittaamansa sekä OWM-datan Googlen Firebaseen. Tässä projektissa otin ensiaskeleet sekä APIen käyttöön että asynkroniseen javascriptiin. jChart piirteli tyhjää kaaviota, joten päädyin vanhanaikaiseen XHMR-pyyntöjen käyttöön. Nyttemmin toki olen tutustunut enemmän async/awaitiin. Mielenkiintoista oli myös saada yksittäisinä lähetetyt tiedot näkymään Firebasessa listana. Firebasen Realtime Databasessa (RTDB) oli kokeilun jälkeen ominaisuus, että mikäli nimi/arvoparissa nimet ovat järjestyksessä lukuja nollasta eteenpäin, tulkitsee RTDB tiedon listana. Siten indeksoimalla pystyi Arduinolta lähettämään tietoa, joka RTDB:ssä näkyy listana.\",\r\n            url: \"/projects/3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            name: \"ADC-RasPi\",\r\n            description: \"IoT-projektina analog-to-digital-convertterin kautta liitetty sensori RasPiin.\",\r\n            img: mcp,\r\n            codeUrl: null,\r\n            content: \"ADC MCP3008 toimintaan tutustumista koulun IoT-kurssilla. Dashboard ja backend olivat vaihtareiden käsialaa, itse postasin Raspilta Pythonilla dataa backendin APIlle. Mielenkiintoisin osuus oli tutkia koodia, jolla Raspi spi.dev kirjaston kautta lukee dataa ADC:lta. SPI-yhteyden toiminta oli c-koodia em. kirjastossa. Kryptinen koodinpätkä johtui ensinnäkin 10bittisestä tiedonsiirrosta, sekä siitä että lukeakseen Masterin oli myös kirjoitettava, vaikka sitten tyhjää jos ei muuta...\",\r\n            url: \"/projects/4\"\r\n        }\r\n    ]\r\n\r\n\r\nexport const selector = (id) => {\r\n    switch(id) {\r\n        case \"1\":\r\n            return <Nopeuspeli />\r\n        case \"2\":\r\n            return <Mearm />\r\n        case \"3\":\r\n            return <Ennustin />\r\n        case \"4\":\r\n            return <ADCRaspi />\r\n        default:\r\n            return null\r\n    }\r\n     \r\n}\r\n\r\nexport default projectsList","import React, {useState} from 'react'\r\nimport {Menu, Icon} from 'semantic-ui-react'\r\n// eslint-disable-next-line\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\n\r\nconst TopMenu = () => {\r\n    const [activeItem, setActiveItem] = useState('')\r\n\r\n    const handleItemClick = (e) => {\r\n        setActiveItem(e)\r\n    }\r\n\r\n    return (\r\n    <Menu stackable fluid widths={5}>\r\n        <Menu.Item\r\n            as={Link}\r\n            to=\"/\"\r\n            active={activeItem === 'home'}\r\n            onClick={() =>handleItemClick('home')}\r\n        >\r\n                <Icon name='home' />\r\n        </Menu.Item>\r\n        <Menu.Item \r\n            as={Link}\r\n            to=\"/kuka\"\r\n            active={activeItem === 'kuka'}\r\n            onClick={() =>handleItemClick('kuka')}\r\n        >Kuka</Menu.Item>\r\n        <Menu.Item \r\n            as={Link}\r\n            to=\"/projektit\"\r\n            active={activeItem === 'projektit'}\r\n            onClick={() =>handleItemClick('projektit')}\r\n        >Projektit</Menu.Item>\r\n        <Menu.Item \r\n            as={Link}\r\n            to=\"/joke\"\r\n            active={activeItem === 'joke'}\r\n            onClick={() =>handleItemClick('joke')}\r\n        >Viihde</Menu.Item>\r\n        <Menu.Item \r\n            as={Link}\r\n            to=\"/about\"\r\n            active={activeItem === 'about'}\r\n            onClick={() =>handleItemClick('about')}\r\n        >About</Menu.Item>\r\n</Menu>\r\n    )\r\n}\r\n\r\nexport default TopMenu","import React from 'react'\r\nimport { Header, Image, Icon } from 'semantic-ui-react'\r\nimport me from '../images/me.jpg'\r\n// eslint-disable-next-line\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\n\r\n\r\nconst Kuka = () => {\r\n    return (\r\n        <div>\r\n            <Header size='large'>Aapo Kärki</Header>\r\n            <Image src={me} size='small' rounded floated='left' />\r\n            <p>Urheiluhieroja, kasvatustieteiden maisteri, luokanopettaja, teknisen työn opettaja, \r\n                tieto- ja viestintätekniikan opiskelija.\r\n            </p>\r\n            <p>Työkokemusta mm. Fazerin karkkitehtaalta, \r\n                Amazonin keskusvarastolta(Leipzigissa), \r\n                hierojayrittäjänä franchiseketjussa. \r\n                Keikkasiivousta kesäisin, sisältäen mm. \r\n                ikkunanpesuja ja lattioiden vahauksia. \r\n                Teknisen työn opettajan sijaisuuksia \r\n                useassa eri koulussa. \r\n                Teknisen työn opettajana Lahden seudulla, \r\n                pienemmän paikkakunnan koulussa 3v.</p>\r\n            <p>Harrastuksiin aina kuulunut mm. salibandy ja jalkapallo. \r\n                Meriittinä hopeamitali pelaajavalmentajana Saksan salibandyn \r\n                Bundesliigasta. Suomen Cupin pikkufinaalin voitto LeBassa, \r\n                Leka-cupin voitto Juvalla ja Jussin tuvan katusählyn \r\n                mestaruus Pontuksella. Ja tietysti Hipan nousu Lahden Korttelin\r\n                Mestigaan salibandyssa.</p>\r\n            <p>Saksassa asutun vuoden hedelminä myös kielitaitona mm. saksaa ja englantia.</p>\r\n            <p>Jos on kysyttävää sivusta tai haluat vaikka tarjota töitä, email on muotoa etunimi.sukunimi ja päätteenä student.lab.fi</p>\r\n            <a href=\"https://www.linkedin.com/in/aapokarki\" target=\"_blank\" rel=\"noopener noreferrer\"><Icon name='linkedin' color='blue' size='huge' /></a>\r\n            <a href=\"https://github.com/aapokar\" target=\"_blank\" rel=\"noopener noreferrer\"><Icon name='github' size='huge' color='grey' /> </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Kuka","import React from 'react'\r\nimport { Card, Image } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\n// eslint-disable-next-line\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\n\r\n\r\nconst projektit = (props) => {\r\n    const mappedProjects = props.projects.map(p => \r\n        <Card as={Link} to={p.url} key={p.id}>\r\n            <Image src={p.img} wrapped ui={false} />\r\n            <Card.Content>\r\n                <Card.Header>{p.name}</Card.Header>\r\n                <Card.Description>\r\n                    {p.description}\r\n                </Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n        )\r\n\r\n    return (\r\n        <Card.Group>{mappedProjects}</Card.Group>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      projects: state.projects,\r\n    }\r\n  }\r\n  \r\nconst connectedProjektit = connect(mapStateToProps)(projektit)\r\n\r\nexport default connectedProjektit","import React from 'react'\r\nimport {Header, Icon} from 'semantic-ui-react'\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <Header as=\"h1\" icon textAlign='center'>\r\n            <Icon name='home' />\r\n            Tervetuloa kotisivuilleni!\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst About = () => {\r\nreturn (\r\n    <div>\r\n    <h1>Tietoa sivustosta</h1>\r\n    <p>\r\n        Sivusto on rakennettu Reactilla. \r\n        Muotoilut on tehty Semantic UIn React-yhteensopivilla \r\n        komponenteilla. Semantic UI vastaa myös \r\n        responsiivisuudesta. Muita kirjastoja: Redux, \r\n        Redux-React, React-router.\r\n    </p>\r\n    <p>Backendina yksinkertaista nodea.</p>\r\n    <p>Viihdepuolella vitsejä haetaan Chuck Norris-vitsien tietokannasta, en ole keksinyt kaikkia itse...</p>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {setJoke} from '../reducers/jokeReducer'\r\nimport { Button, Icon, Segment } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nconst Joke = (props) => {\r\n    const handleClick = (e) => {\r\n        props.setJoke()\r\n    }\r\n    return (\r\n        <Segment textAlign='center'>\r\n            <Button icon onClick={handleClick}>\r\n            Paina tästä ja lisää viihtymistäsi!<br/>\r\n            <Icon name='random' loading  />\r\n            </Button>\r\n            <p>{props.joke}</p>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      joke: state.joke,\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = {\r\n    setJoke\r\n  }\r\n\r\nconst connectedJoke = connect(mapStateToProps, mapDispatchToProps)(Joke)\r\n\r\nexport default connectedJoke","import React, {useEffect} from 'react';\n// eslint-disable-next-line\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport {Container} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\n\nimport { initializeProjects } from './reducers/projectsReducer'\nimport {setJoke} from './reducers/jokeReducer'\nimport projectsList, {selector} from './data/projects'\n\nimport TopMenu from './components/TopMenu'\nimport Kuka from './components/Kuka'\nimport Projektit from './components/Projektit'\nimport Project from './components/Project'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Joke from './components/Joke'\n\nimport Ennustin from './data/projectComponents/Ennustin'\n\n\nfunction App(props) {\n\n  useEffect(() => {\n    props.initializeProjects(projectsList)\n  }, [])\n\n  useEffect(() => {\n    props.setJoke()\n  }, [])\n\n  const projectById = (id) => {\n    // return props.projects.find(a => a.id===id)\n    return selector(id)\n  }\n\n\n  return (\n    // <div>\n      <Router>\n        <Container>\n          <TopMenu />\n          <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/kuka\">\n            <Kuka />\n          </Route>\n          <Route path=\"/joke\">\n            <Joke />\n          </Route>\n          <Route path=\"/projektit\">\n            <h1>Menneitä projekteja vuosien varrelta</h1>\n            <Projektit />\n          </Route>\n          <Route exact path=\"/projects/:id\" render={({ match }) =>\n             <div>{projectById(match.params.id)}</div>\n          } />\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        </Container>\n      </Router>\n    // </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    projects: state.projects,\n  }\n}\n\nconst mapDispatchToProps = {\n  initializeProjects,\n  setJoke\n}\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App)\n\nexport default connectedApp;\n\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport projectsReducer from './reducers/projectsReducer'\r\nimport jokeReducer from './reducers/jokeReducer'\r\n\r\nconst reducer = combineReducers({\r\n  projects: projectsReducer,\r\n  joke: jokeReducer\r\n})\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less'\nimport App from './App';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={ store }>\n    <App />\n  </Provider>,\n document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/nopeuspeli.f667b80d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mcp3008.7a2a0e96.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mearm.b643eb11.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wp.246fdb28.jpg\";"],"sourceRoot":""}